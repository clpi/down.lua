--- @meta down.types
--- @brief Provides core data types
--- @version <5.2,JIT
---
---
--- The important store value object
--- @class (exact) down.old.Store<V>: { id: down.store.Name, uri: down.Uri, data?: down.store.Data<V> } store
---
--- [string]: down.Store<V>
--- @class (exact) down.old.store.Map<V>: { [down.store.Key]?: down.Store<V> } Map { log1 = { i}}
---
--- The important store value object
--- @class (exact) down.old.store.Kind: { [down.store.ItemKind]?: down.store.Map<down.store.Key> }
---
---
---
--- The scope of an entity.
--- @class (exact) down.mod.Config.Lsp  lsp
---   @field ['lsp.document']? down.lsp.document.Data lsp.document
---   @field ['lsp.workspace']? down.lsp.workspace.Data lsp.workspace
---
---   @field ['lsp.completion']? down.lsp.completion.Data lsp.completion
---
--- @class (exact) down.mod.Config
---   @field public lsp? lsp.Config
---

--- The scope of an entity.
--- @class down.mod.Mods: {
---   ui?: down.mod.ui.Config,
---   note?: down.mod.note.Config,
---   workspace?: down.mod.workspace.Config,
---   lsp?: down.mod.lsp.Config,
---   edit?: down.mod.edit.Config,
---   data?: down.mod.data.Config,
---   tool?: down.mod.tool.Config,
---   tool?: down.mod.tool.Config,
---   cmd?: down.mod.cmd.Config,
---   config?: down.mod.cmd.Config,
--- }
---
---   @field ['lsp.document']? lsp.document.Data
---   @field ['lsp.workspace']? lsp.workspace.Data
---   @field ['lsp.completion']? lsp.completion.Data
---   @field ['lsp.actions']? lsp.actions.Data
---   @field ['lsp.command']? lsp.command.Data
---   @field ['lsp.hint']? lsp.hint.Data
---   @field ['data.task']? data.task.Data
---   @field ['data.store']? data.store.Data
---   @field ['data.task.agenda']? data.task.agenda.Data
---   @field ['data.log']? data.log.Data
---   @field ['lsp.hover']? lsp.hover.Data
---   @field ['lsp.lens']? lsp.lens.Data
---   @field lsp? lsp.Data
---   @field ['lsp.window']? lsp.window.Data
---   @field ['lsp.semantic']? lsp.semantic.Data
---   @field ["edit.conceal"]? edit.conceal.Data
---   @field ["ui.icon"]? ui.icon.Data
---   @field workspace? workspace.Data
---   @field ["edit.fold"]? edit.fold.Data
---   @field ["edit.hl"]? edit.hl.Data
---   @field ["ui.win"]? ui.win.Data
---   @field note? note.Data
---   @field ['data.clipboard']? data.clipboard.Data
---   @field ['data.dirs']? data.dirs.Data
---   @field ['data.export']? data.export.Data
---   @field ['data.encrypt']? data.encrypt.Data
---   @field ['data.metadata']? data.metadata.Data
---   @field ['data.syntax']? data.syntax.Data
---   @field ['data.toc']? data.toc.Data
---   @field ['edit.parse']? edit.parse.Data
---   @field ['data.log']? data.log.Data
---   @field ['data.link']? data.link.Data
---   @field ['edit.link']? edit.link.Data
---   @field cmd? cmd.Data
---   @field ['data.tag']? data.tag.Data
---   @field ['data.sync']? data.sync.Data
---   @field ['data.mod']? data.mod.Data
---   @field ['data.code']? data.code.Data
---   @field ['data.todo']? data.todo.Data
---   @field ['edit.todo']? edit.todo.Data
---   @field ['edit.cursor']? edit.cursor.Data
---   @field ['edit.find']? down.edit.find.Data
---   @field ['edit.link']? down.edit.link.Data
---   @field ['edit.indent']? down.edit.indent.Data
---   @field ui? down.ui.Data
---   @field media? down.data.media.Data media
---   @field ['data.template']? down.data.template.Data
---   @field ["data.code.snippet"]? down.data.code.snippet.Data
---   @field ["data.code.run"]? down.data.code.run.Data
---   @field ["ui.calendar"]? down.ui.calendar.Data
---   @field ["ui.calendar.month"]? down.ui.calendar.month.Data
---   @field ["integration.treesitter"]? down.down.integration.treesitter.Data
---   @field ["integration.blink"]? down.integration.blink.Data
---   @field ["integration.cmp"]? down.integration.cmp.Data
---   @field ["integration.telescope"]? down.integration.telescope.Data
---   @field ["integration.lualine"]? down.integration.lualine.Data
---   @field ["integration.trouble"]? down.integration.trouble.Data
---   @field ["integration.fzf"]? down.integration.fzf.Data
---   @field ["ui.chat"]? down.ui.chat.Data
---   @field ["ui.sidebar"]? down.ui.sidebar.Data
---   @field ["ui.popup"]? down.ui.popup.Data
---   @field ["ui.status"]? down.ui.status.Data
---
--- down.Mods
--- @class (exact) down.mod.config.Cfg: table
---   @field [string]? { [string]?: any }
---   @field enabled? boolean
---
--- TODO: merge data field to [string]? { [string]?: down.Event }
--- TODO:   down.mod.Events.defined ->
--- TODO:     #field [string]? { [string]?: down.Event }
---
--- @class (exact) down.event.Subscribed
---   @field public [string]? { [string]: boolean }

---
--- @class (exact) down.mod.Config: { [string]?: any }
---   @field public [string]? any

--- TODO: merge data field to [string]?: down.mod.Data
--- TODO:   down.Mod.data ->
--- TODO:     #field [string]? down.config.UserMod
--- TODO:   down.Mod.config ->
--- TODO:     #field config? down.mod.Config

---
--- @class (exact) down.config.Ft
---   @field md boolean
---   @field mdx boolean
---   @field markdown boolean
---   @field down boolean
---
--- TODO: make down.config.User? table
--- TODO:   down.config.config.User.mod.config ->
--- TODO:     #field [string]? down.config.UserMod
---
--- @class (exact) down.config.User
---   @field [string]? down.config.mod.Config
---   @field hook? fun(args?: string) Hook to optionally run on load
---   @field dev? boolean Whether to start in dev mode
---
--- TODO: make down.config.UserMod? table
--- TODO:   down.config.UserMod.config ->
--- TODO:     #field [string]? down.Mod
---
--- @class (exact) down.config.UserConfig: down.config.BaseConfig, {
---   lsp?: down.mod.lsp.Config,
---   data?: down.mod.data.Config,
---   edit?: down.mod.edit.Config,
---   config?: down.mod.config.Config,
---   cmd?: down.mod.cmd.Config,
---   tool?: down.mod.tool.Config,
---   workspace?: down.mod.worksspace.Config,
---   note?: down.mod.note.Config,
---   ui?: down.mod.ui.Config,
---   config?: down.mod.config.Config,
--- }

--- TODO: make mod field merge to [string]: down.Mod
--- TODO:   down.Config.mod ->
--- TODO:     #field [string]? down.Mod
---
--- @class (exact) down.Config
---   @field dev? boolean  Whether to start in dev mode
---   @field hook? fun()   A hook that is run when down is started
---   @field workspace? string[]
---   @field mod table<string, down.Mod> Acts as a copy of the user's config that may be modified at runtime.
---   @field os down.Os                           The operating system that down is currently running under.
---   @field pathsep "\\"|"/"                                  The operating system that down is currently running under.
---   @field started boolean                                   Set to `true` when down is fully initialized.
---   @field user down.config.User              Stores the config provided by the user.
---   @field version string                                    The version of down that is currently active. Automatically updated by CI on every release.
---   @field public [string]? down.Mod
---   @field load {
---     opts: fun(),
---     maps: fun(),
---     lsp: fun()
---   }
---   @field setup fun(user: down.config.User, default: string[], ...: any): boolean Loads user config
---   @field homedir fun(...: string): string
---   @field vimdir fun(...: string): string
---   @field file fun(file: string | nil): string
---   @field fromfile fun(f: string | nil): down.config.User

--- Stores the config for the entirety of down.
--- This includes not only the user config (passed to `setup()`), but also internal
--- variables that describe something specific about the user's hardware.
--- @see down.Setup
---
---
--- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---

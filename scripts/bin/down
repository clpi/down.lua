#!/usr/bin/env lua

Down = {}

--+  +----------------------+ down +----------------------+  +--
--+  |                                                    |  +--
--+  |    down       v0.1.1-alpha                         |  +--
--+  |                                                    |  +--
--+  |    ABOUT                                           |  +--
--+  |      down (down.lua) is a dev-focused note-taking  |  +--
--+  |      environment for markdown, in development.     |  +--
--+  |                                                    |  +--
--+  |    USAGE                                           |  +--
--+  |       down  [options]  <args>  [file]              |  +--
--+  |                                                    |  +--
--+  |    OPTIONS                                         |  +--
--+  |      -h, --help         Show help and exit         |  +--
--+  |      -v, --version      Show version and exit      |  +--
--+  |      -i, --interactive  Run in interactive mode    |  +--
--+  |      -e, --execute      Run in execute mode        |  +--
--+  |      -c, --config       Specify a config file      |  +--
--+  |                                                    |  +--
--+  |    ARGS                                            |  +--
--+  |      serve             Run the server              |  +--
--+  |      init              Initialize the server       |  +--
--+  |      shell             Run the shell               |  +--
--+  |      update            Update the server           |  +--
--+  |      install           Install the server          |  +--
--+  |      uninstall         Uninstall the server        |  +--
--+  |      config            Configure the server        |  +--
--+  |      status            Show the server status      |  +--
--+  |      start             Start the server            |  +--
--+  |      stop              Stop the server             |  +--
--+  |      restart           Restart the server          |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

local w_ok, down = pcall(require, 'down')
local u_ok, util = pcall(require, 'down.util')
local m_ok, mod = pcall(require, 'down.mod')
local c_ok, conf = pcall(require, 'down.config')
local l_ok, lsp = pcall(require, 'down.mod.lsp')
local ws_ok, ws = pcall(require, 'down.mod.workspace')
local wts_ok, wts = pcall(require, 'down.mod.integration.treesitter')

-- print(w_ok, u_ok)

--+  +---------------------+ extern +---------------------+  +--
--+  |                                                    |  +--
--+  |  import the down lua dependencies.                 |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

local lp_ok, lp = pcall(require, 'lpeg')
local vt_ok, vts = pcall(require, 'vim.treesitter')
local ts_ok, nts = pcall(require, 'nvim-treesitter')
local tsu_ok, tsu = pcall(require, 'nvim-treesitter.ts_utils')

--+  +----------------------+ util +----------------------+  +--
--+  |                                                    |  +--
--+  |  define utility functions.                         |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

local lb, rb, gb, yb, s, mb, cb, wb =
  '\x1b[40m', '\x1b[41m', '\x1b[42m', '\x1b[43m', '\x1b[44m', '\x1b[45m', '\x1b[46m', '\x1b[47m'
local x, i, s, e, u, cr = '\x1b[0m', '\x1b[7m', '\x1b[1m', '\x1b[3m', '\x1b[4m', '\x1b[9m'
local ll, lr, lg, ly, lb, lm, lc, lw =
  '\x1b[90m', '\x1b[91m', '\x1b[92m', '\x1b[93m', '\x1b[94m', '\x1b[95m', '\x1b[96m', '\x1b[97m'
local l, r, g, y, b, m, c, w =
  '\x1b[30m', '\x1b[31m', '\x1b[32m', '\x1b[33m', '\x1b[34m', '\x1b[35m', '\x1b[36m', '\x1b[37m'
local bi = function(inp)
  return inp .. i
end
local si = function(inp)
  return inp .. s .. i
end
local br, bg, by, bb, bm, bc, bw = bi(r), bi(g), bi(y), bi(b), bi(m), bi(c), bi(w)
local sr, sg, sy, sb, sm, sc, sw = si(r), si(g), si(y), si(b), si(m), si(c), si(w)

--+  +----------------------+ vars +----------------------+  +--
--+  |                                                    |  +--
--+  |  define necessary variables.                       |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

local down = {
  pre = {
    i = function(c, a)
      return c .. '' .. a
    end,
    y = function(a)
      return sy .. '' .. a
    end,
    c = function(a)
      return sc .. '' .. a
    end,
    m = function(a)
      return sm .. '' .. a
    end,
    r = function(a)
      return sr .. '' .. a
    end,
    w = function(a)
      return sw .. '' .. a
    end,
    g = function(a)
      return sg .. '' .. a
    end,
    b = function(a)
      return sb .. '' .. a
    end,
  },
  colors = {
    down = y,
    info = c,
    cmd = m,
    arg = w,
    flag = g,
  },
  style = function(pre, h)
    return pre .. ' ' .. h .. ' '
  end,
  version = 'v0.1.0-alpha.2',
  repo = 'github.com/clpi/down.lua',
  home = 'down.cli.st',
  updated = '2024-12-15',
  color = true,
  debug = false,
}
down.styles = {}
down.bits = {
  vers = ll .. 'v' .. x .. w .. '0.1.1' .. ll .. '-' .. x .. w .. 'alpha',
  lambda = ll .. s .. '󰘧 ' .. x,
  downi = ll .. s .. '󰘧 ' .. x .. y .. 'down' .. x,
  brk = {
    l = ll .. '[' .. x,
    r = ll .. ']' .. x,
  },
  brc = {
    l = ll .. '{' .. x,
    r = ll .. '}' .. x,
  },
  par = {
    l = ll .. '(' .. x,
    r = ll .. ')' .. x,
  },
  icon = {
    block = ll .. '󰆧 ' .. x,
    info = ll .. '󰆨 ' .. x,
  },
  arrow = {
    l = ll .. '←' .. x,
    r = ll .. '→' .. x,
  },
  arr = {
    l = ll .. '<' .. x,
    r = ll .. '>' .. x,
  },
  ellipses = ll .. '…' .. x,
  pipe = ll .. '|' .. x,
  comma = ll .. ',' .. x,
  colon = ll .. ':' .. x,
  period = ll .. '.' .. x,
  asterisk = ll .. '*' .. x,
  plus = ll .. '+' .. x,
  hy = ll .. '-' .. x,
  hy2 = ll .. '--' .. x,
  eq = ll .. '=' .. x,
  down = y .. 'down' .. x,
  markdown = lg .. ' 󰍔 ' .. g .. ' Mark' .. x .. g .. 'down' .. x,
  downluai = x .. y .. ll .. '󰘧' .. y .. ' down' .. '.' .. 'lua',
  downlua = x .. ly .. 'down' .. ll .. '.' .. y .. 'lua',
  command = ll .. '[' .. g .. '󰆧 ' .. g .. 'command' .. ll .. ']' .. x,
  opts = ll .. '[' .. b .. '󰆧 ' .. ll .. '' .. b .. 'opts' .. ll .. ']' .. x,
  flags = ll .. '[' .. m .. '󰆧 ' .. m .. 'flags' .. ll .. ']' .. x,
  args = ll .. '[' .. r .. '󰆧 ' .. ll .. '' .. r .. 'args' .. ll .. ']' .. x,
  author = 'Chris Pecunies ' .. g .. '<clp@clp.is>',
}
down.bits.version = down.bits.vers
  .. ll
  .. ' ('
  .. ll
  .. 'updated '
  .. g
  .. down.updated
  .. ll
  .. ')'
down.bits.usage = ''
  .. down.bits.downi
  .. ' '
  .. down.bits.command
  .. down.bits.opts
  .. down.bits.flags
  .. down.bits.args
  .. down.bits.brk.l
  .. down.bits.ellipses
  .. down.bits.brk.r
down.bits.desc = down.bits.downlua
  .. x
  .. w
  .. ' is a dev-focused, familiar'
  .. down.bits.markdown
  .. '\n  '
  .. w
  .. 'environment, focused on providing familiarity \n  '
  .. w
  .. 'and extensibility for developers, in development.'

--+  +----------------------+ kind +----------------------+  +--
--+  |                                                    |  +--
--+  |  define kind type.                                 |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

local Kind = {
  opt = {
    param = 'param',
    flag = 'flag',
  },
  arg = 'arg',
  cmd = 'cmd',
}

--+  +----------------------+ args +----------------------+  +--
--+  |                                                    |  +--
--+  |  define arg type.                                  |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

local Arg = {
  long = nil,
  index = -1,
  pos = 1,
  kind = nil,
  short = nil,
  value = nil,
  handler = nil,
  desc = '',
  help = '',
}

Arg.Kind = {
  -- like --... or -... or --...=... or -...=...
  opt = {
    -- like --...=... or -...=...
    param = {
      short = {
        -- like -a=...
        short = 'opt_param_short_letter',
        -- like -abc=... NOTE: bad
        long = 'opt_param_short_short',
      },
      long = {
        -- like --a=... NOTE: bad
        short = 'opt_param_long_short',
        -- like --abc=...
        long = 'opt_param_long_long',
      },
    },
    flag = {
      -- like -...
      short = {
        -- like -a
        short = 'opt_flag_short_short',
        -- like -abc NOTE: bad
        long = 'opt_flag_short_long',
      },
      -- like --...
      long = {
        -- like --a NOTE: bad
        short = 'opt_flag_long_short',
        -- like --abc
        long = 'opt_flag_long_long',
      },
    },
  },
  arg = 'arg',
  cmd = {
    -- like abc
    long = 'cmd_long',
    -- like a
    short = 'cmd_short',
  },
}

---@return string, string
function Arg.Kind.check(a)
  if a:sub(1, 1) == '-' then
    if a:sub(2, 2) == '-' then
      a = a:sub(3)
      if #a == 1 then
        return a, Arg.Kind.opt.flag.long.short
      end
      return a, Arg.Kind.opt.flag.long.long
    else
      a = a:sub(2)
      if #a == 1 then
        return a, Arg.Kind.opt.flag.short.short
      end
      return a, Arg.Kind.opt.flag.short.long
    end
  else
    if #a == 1 then
      return a, Arg.Kind.cmd.short
    else
      return a, Arg.Kind.cmd.long
    end
  end
end

Arg.Kind.opt.param.is = function(k)
  if k:sub(1, 9) == 'opt_param' then
    return true
  end
  return false
end
Arg.Kind.opt.flag.is = function(k)
  if k:sub(1, 8) == 'opt_flag' then
    return true
  end
  return false
end

Arg.Kind.opt.is = function(k)
  if k:sub(1, 3) == 'opt' then
    return true
  end
  return false
end

Arg.Kind.cmd.is = function(k)
  if k:sub(1, 3) == 'cmd' then
    return true
  end
  return false
end

function Arg.Kind.unknown(a, k)
  if k == Arg.Kind.opt.flag.long.long then
    print(
      r .. 'unknown' .. x .. b .. ' long ' .. l .. '(long)' .. x .. ' flag: ' .. down.bits.hy2 .. a
    )
  elseif k == Arg.Kind.opt.flag.long.short then
    print(
      r .. 'unknown' .. x .. b .. ' long ' .. l .. '(short)' .. x .. ' flag: ' .. down.bits.hy2 .. a
    )
  elseif k == Arg.Kind.opt.flag.short.long then
    print(
      r .. 'unknown' .. x .. g .. ' short ' .. l .. '(long)' .. x .. ' flag: ' .. down.bits.hy .. a
    )
  elseif k == Arg.Kind.opt.flag.short.short then
    print(
      r .. 'unknown' .. x .. g .. ' short ' .. l .. '(short)' .. x .. ' flag: ' .. down.bits.hy .. a
    )
  elseif k == Arg.Kind.cmd.short then
    print(r .. 'unknown' .. x .. g .. ' short ' .. y .. 'cmd' .. ll .. ': ' .. x .. a)
  elseif k == Arg.Kind.cmd.long then
    print(r .. 'unknown' .. x .. b .. ' long ' .. y .. 'cmd' .. ll .. ': ' .. x .. a)
  else
    print(r .. 'unknown' .. x .. ' arg' .. ll .. ': ' .. x .. a)
  end
end

function Arg.flag(lng, desc, h, sh)
  return Arg.init(lng, sh or lng:sub(1, 1), Kind.opt.flag, desc, h)
end

function Arg.cmd(pos, lng, desc, h, sh)
  ---TODO: add subcommands
  return Arg.init(lng, sh or lng:sub(1, 1), Kind.cmd, desc, h, pos)
end

function Arg.init(lng, sh, k, d, h, v, pos)
  local self = {}
  self.__index = self
  self.pos = pos or nil
  self.__tostring = function(t)
    return t.long
  end
  self.desc = d or ''
  self.long = lng or ''
  self.short = sh or l[1]
  self.kind = k or Kind.arg
  self.handler = h or function()
    print(lng, sh)
  end
  self.value = v or nil
  self.help = Arg.help(self)
  return self
end

function Arg:help(h)
  if self.kind == Kind.cmd then
    return ''
      .. g
      .. self.short
      .. ''
      .. x
      .. ' '
      .. down.bits.pipe
      .. ' '
      .. g
      .. self.long:sub(1, 1)
      .. x
      .. self.long:sub(2)
      .. '\t  '
      .. self.desc
  elseif self.kind == Kind.opt.flag then
    return ''
      .. down.bits.hy
      .. b
      .. self.short
      .. x
      .. ' '
      .. down.bits.pipe
      .. ' '
      .. down.bits.hy2
      .. b
      .. self.long:sub(1, 1)
      .. x
      .. self.long:sub(2)
      .. '\t  '
      .. self.desc
  else
    print(self.long, self.short)
  end
end

function Arg:isopt()
  return self.kind == Kind.opt.param or self.kind == Kind.opt.flag
end

function Arg:check(a, k)
  if a == self.long and k == Arg.Kind.opt.flag.long.long then
    return true
  elseif a == self.short and k == Arg.Kind.opt.flag.short.short then
    return true
  elseif a == self.short and k == Arg.Kind.cmd.short then
    return true
  elseif a == self.long and k == Arg.Kind.cmd.long then
    return true
  end
  return false
end

function Arg:handle(a, k)
  if Arg.check(self, a, k) then
    return self.handler()
  end
end

--+  +--------------------+ handlers +--------------------+  +--
--+  |                                                    |  +--
--+  |  define handler functions.                         |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

local function test(...)
  print('test')
end

local function conf(...)
  print('conf')
end

--+  +----------------------+ func +----------------------+  +--
--+  |                                                    |  +--
--+  |  define core functions.                            |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

down.opts = {}
down.args = {}
down.fmt = {
  fmt = function(c, h, i)
    down.help.header.print(c, h)
  end,
  cmds = {
    note = { title = '󰯂 note ', color = sb },
    log = { title = '󰆧 log ', color = sg },
    init = { title = '󰯂 init ', color = sm },
    run = { title = '󰆧 run ', color = sr },
    config = { title = '󰯂 config ', color = sc },
    workspace = { title = '󰯂 workspace ', color = sy },
  },
}
down.help = {
  header = {
    print = function(pre, h)
      print('\n' .. pre .. ' ' .. h .. ' ')
    end,
    info = '󰯂 INFO ',
    cmds = ' CMDS ',
    args = '󰆧 ARGS ',
    flag = '󰷐 FLAGS',
    opts = '󰆧 OPTS ',
    usage = '󰒓 USAGE',
  },
  down = function()
    print('\n' .. down.bits.downi .. ' ' .. x .. down.bits.version)
    -- print(b .. "  author " .. x .. "   " .. down.bits.author)
    -- print(b .. "  repo " .. x .. "     " .. down.repo)
    -- print(b .. "  home " .. x .. "     " .. down.home)
  end,
  info = function()
    down.help.header.print(sy, down.help.header.info)
    print(bg .. '' .. x .. '  ' .. w .. down.bits.desc)
  end,
  usage = function()
    down.help.header.print(sg, down.help.header.usage)
    print(bg .. '' .. x .. '  ' .. w .. down.bits.usage)
  end,
  cmds = function()
    down.help.header.print(sg, down.help.header.cmds)
    for _, v in pairs(down.cmds) do
      print(bg .. '' .. x .. '  ' .. w .. Arg.help(v))
    end
  end,
  flags = function()
    down.help.header.print(sb, down.help.header.flag)
    for _, v in pairs(down.flags) do
      print(bg .. '' .. x .. ' ' .. w .. Arg.help(v))
    end
  end,
  opts = function()
    down.help.header.print(sm, down.help.header.opts)
    print(br .. '' .. x .. '  ' .. x .. r .. down.bits.ellipses)
  end,
  args = function()
    down.help.header.print(sr, down.help.header.args)
    print(bm .. '' .. x .. '  ' .. x .. m .. down.bits.ellipses)
  end,
}
down.help.print = function()
  down.help.down()
  down.help.info()
  -- down.help.usage()
  down.help.cmds()
  down.help.flags()
  -- down.help.opts()
  -- down.help.args()
end
down.flags = {
  version = Arg.flag('version', 'Print version', function()
    print(down.version)
  end),
  debug = Arg.flag('debug', 'Set debug', function()
    print('debug')
  end),
  config = Arg.flag('config', 'Specify config file', function(...)
    print('config')
  end),
  stdout = Arg.flag('stdout', 'Set stdout output', function()
    print('stdout')
  end),
  profile = Arg.flag('color', 'Set color output', function()
    print('color')
  end),
  help = Arg.flag('help', 'Print help', down.help.print),
}

down.cmds = {
  init = Arg.cmd(1, 'init', 'Initialize workspace', function()
    down.fmt.fmt(down.fmt.cmds.init.color, down.fmt.cmds.init.title)
  end),
  upgrade = Arg.cmd(1, 'upgrade', 'Upgrade binary', function()
    down.fmt.fmt(down.fmt.cmds.upgrade.color, down.fmt.cmds.init.title)
  end),
  log = Arg.cmd(1, 'log', 'Log functionality', function(...)
    down.fmt.fmt(down.fmt.cmds.log.color, down.fmt.cmds.log.title)
  end),
  note = Arg.cmd(1, 'note', 'Note functionality', function(...)
    down.fmt.fmt(down.fmt.cmds.note.color, down.fmt.cmds.note.title)
  end),
  workspace = Arg.cmd(1, 'workspace', 'List workspaces', function(...)
    down.fmt.fmt(down.fmt.cmds.workspace.color, down.fmt.cmds.workspace.title)
  end),
  run = Arg.cmd(1, 'run', 'Run the lsp', function(...)
    down.fmt.fmt(down.fmt.cmds.run.color, down.fmt.cmds.run.title)
  end),
  serve = Arg.cmd(1, 'serve', 'Serve the lsp', function(...)
    down.fmt.fmt(down.fmt.cmds.run.color, down.fmt.cmds.run.title)
  end),
  -- version = Arg.cmd("version", "Print version", down.flags.version.desc, down.flags.version.handler),
  config = Arg.cmd(1, 'config', 'Set config values', function(...)
    down.fmt.fmt(down.fmt.cmds.config.color, down.fmt.cmds.config.title)
  end),
  help = Arg.cmd(1, 'help', 'Print help', down.flags.help.handler),
}
---  @param a string arg
function down:pflag(a, k)
  local ok = false
  for _, v in pairs(self.flags) do
    if Arg.check(v, a, k) then
      ok = true
      return Arg.handle(v, a, k)
    end
  end
  if ok == false then
    return Arg.Kind.unknown(a, k)
  end
end

---  @param a string arg
function down:pcmd(ix, a, k)
  local ok = false
  for _, v in pairs(self.cmds) do
    local pos = v.pos or 1
    if Arg.check(v, a, k, ix) and ix == pos then
      ok = true
      return Arg.handle(v, a, k, ix)
    end
  end
  if ok == false then
    return Arg.Kind.unknown(a, k)
  end
end

---  @return nil
function down:parse()
  local a, ac = arg, #arg
  if ac == 0 then
    self.flags.help.handler()
  end
  local ci = 1
  for _ix, str in ipairs(a) do
    local st, k = Arg.Kind.check(str)
    if Arg.Kind.opt.flag.is(k) then
      self:pflag(st, k)
    elseif Arg.Kind.cmd.is(k) then
      self:pcmd(ci, st, k)
      ci = ci + 1
    else
      Arg.Kind.unknown(st, k)
    end
  end
end

--+  +----------------------+ main +----------------------+  +--
--+  |                                                    |  +--
--+  |  define and call main function.                    |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

function down:main()
  self:parse()
end

down:main()

--+  +----------------------+ down +----------------------+  +--
--+  |                                                    |  +--
--+  |  version 0.1.0-alpha.                              |  +--
--+  |                                                    |  +--
--+  |  author: Chris Pecunies <clp@clp.is>               |  +--
--+  |                                                    |  +--
--+  +----------------------------------------------------+  +--

--vim:ft=lua,ts=2,sw=2,sts=2,et
